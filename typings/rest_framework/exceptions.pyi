"""
This type stub file was generated by pyright.
"""

"""
Handled exceptions raised by REST framework.

In addition Django's built in 403 and 404 exceptions are handled.
(`django.http.Http404` and `django.core.exceptions.PermissionDenied`)
"""
class ErrorDetail(str):
    """
    A string-like object that can additionally have a code.
    """
    code = ...
    def __new__(cls, string, code=...): # -> Self@ErrorDetail:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __hash__(self) -> int:
        ...
    


class APIException(Exception):
    """
    Base class for REST framework exceptions.
    Subclasses should provide `.status_code` and `.default_detail` properties.
    """
    status_code = ...
    default_detail = ...
    default_code = ...
    def __init__(self, detail=..., code=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_codes(self): # -> list[Unknown] | dict[Unknown, Unknown] | None:
        """
        Return only the code part of the error details.

        Eg. {"name": ["required"]}
        """
        ...
    
    def get_full_details(self): # -> list[Unknown] | dict[Unknown, Unknown] | dict[str, ErrorDetail | None]:
        """
        Return both the message & code parts of the error details.

        Eg. {"name": [{"message": "This field is required.", "code": "required"}]}
        """
        ...
    


class ValidationError(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...
    def __init__(self, detail=..., code=...) -> None:
        ...
    


class ParseError(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...


class AuthenticationFailed(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...


class NotAuthenticated(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...


class PermissionDenied(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...


class NotFound(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...


class MethodNotAllowed(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...
    def __init__(self, method, detail=..., code=...) -> None:
        ...
    


class NotAcceptable(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...
    def __init__(self, detail=..., code=..., available_renderers=...) -> None:
        ...
    


class UnsupportedMediaType(APIException):
    status_code = ...
    default_detail = ...
    default_code = ...
    def __init__(self, media_type, detail=..., code=...) -> None:
        ...
    


class Throttled(APIException):
    status_code = ...
    default_detail = ...
    extra_detail_singular = ...
    extra_detail_plural = ...
    default_code = ...
    def __init__(self, wait=..., detail=..., code=...) -> None:
        ...
    


def server_error(request, *args, **kwargs): # -> JsonResponse:
    """
    Generic 500 error handler.
    """
    ...

def bad_request(request, exception, *args, **kwargs): # -> JsonResponse:
    """
    Generic 400 error handler.
    """
    ...

