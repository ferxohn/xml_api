"""
This type stub file was generated by pyright.
"""

"""
The most important decorator in this module is `@api_view`, which is used
for writing function-based views with REST framework.

There are also various decorators for setting the API policies on function
based views, as well as the `@action` decorator, which is used to annotate
methods on viewsets that should be included by routers.
"""
def api_view(http_method_names=...): # -> (func: Unknown) -> (*args: Any, **kwargs: Any) -> HttpResponseBase:
    """
    Decorator that converts a function-based view into an APIView subclass.
    Takes a list of allowed methods for the view as an argument.
    """
    ...

def renderer_classes(renderer_classes): # -> (func: Unknown) -> Unknown:
    ...

def parser_classes(parser_classes): # -> (func: Unknown) -> Unknown:
    ...

def authentication_classes(authentication_classes): # -> (func: Unknown) -> Unknown:
    ...

def throttle_classes(throttle_classes): # -> (func: Unknown) -> Unknown:
    ...

def permission_classes(permission_classes): # -> (func: Unknown) -> Unknown:
    ...

def schema(view_inspector): # -> (func: Unknown) -> Unknown:
    ...

def action(methods=..., detail=..., url_path=..., url_name=..., **kwargs): # -> (func: Unknown) -> Unknown:
    """
    Mark a ViewSet method as a routable action.

    `@action`-decorated functions will be endowed with a `mapping` property,
    a `MethodMapper` that can be used to add additional method-based behaviors
    on the routed action.

    :param methods: A list of HTTP method names this action responds to.
                    Defaults to GET only.
    :param detail: Required. Determines whether this action applies to
                   instance/detail requests or collection/list requests.
    :param url_path: Define the URL segment for this action. Defaults to the
                     name of the method decorated.
    :param url_name: Define the internal (`reverse`) URL name for this action.
                     Defaults to the name of the method decorated with underscores
                     replaced with dashes.
    :param kwargs: Additional properties to set on the view.  This can be used
                   to override viewset-level *_classes settings, equivalent to
                   how the `@renderer_classes` etc. decorators work for function-
                   based API views.
    """
    ...

class MethodMapper(dict):
    """
    Enables mapping HTTP methods to different ViewSet methods for a single,
    logical action.

    Example usage:

        class MyViewSet(ViewSet):

            @action(detail=False)
            def example(self, request, **kwargs):
                ...

            @example.mapping.post
            def create_example(self, request, **kwargs):
                ...
    """
    def __init__(self, action, methods) -> None:
        ...
    
    def get(self, func):
        ...
    
    def post(self, func):
        ...
    
    def put(self, func):
        ...
    
    def patch(self, func):
        ...
    
    def delete(self, func):
        ...
    
    def head(self, func):
        ...
    
    def options(self, func):
        ...
    
    def trace(self, func):
        ...
    


