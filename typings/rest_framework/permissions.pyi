"""
This type stub file was generated by pyright.
"""

"""
Provides a set of pluggable permission policies.
"""
SAFE_METHODS = ...
class OperationHolderMixin:
    def __and__(self, other): # -> OperandHolder:
        ...
    
    def __or__(self, other): # -> OperandHolder:
        ...
    
    def __rand__(self, other): # -> OperandHolder:
        ...
    
    def __ror__(self, other): # -> OperandHolder:
        ...
    
    def __invert__(self): # -> SingleOperandHolder:
        ...
    


class SingleOperandHolder(OperationHolderMixin):
    def __init__(self, operator_class, op1_class) -> None:
        ...
    
    def __call__(self, *args, **kwargs):
        ...
    


class OperandHolder(OperationHolderMixin):
    def __init__(self, operator_class, op1_class, op2_class) -> None:
        ...
    
    def __call__(self, *args, **kwargs):
        ...
    


class AND:
    def __init__(self, op1, op2) -> None:
        ...
    
    def has_permission(self, request, view):
        ...
    
    def has_object_permission(self, request, view, obj):
        ...
    


class OR:
    def __init__(self, op1, op2) -> None:
        ...
    
    def has_permission(self, request, view):
        ...
    
    def has_object_permission(self, request, view, obj):
        ...
    


class NOT:
    def __init__(self, op1) -> None:
        ...
    
    def has_permission(self, request, view): # -> bool:
        ...
    
    def has_object_permission(self, request, view, obj): # -> bool:
        ...
    


class BasePermissionMetaclass(OperationHolderMixin, type):
    ...


class BasePermission(metaclass=BasePermissionMetaclass):
    """
    A base class from which all permission classes should inherit.
    """
    def has_permission(self, request, view): # -> Literal[True]:
        """
        Return `True` if permission is granted, `False` otherwise.
        """
        ...
    
    def has_object_permission(self, request, view, obj): # -> Literal[True]:
        """
        Return `True` if permission is granted, `False` otherwise.
        """
        ...
    


class AllowAny(BasePermission):
    """
    Allow any access.
    This isn't strictly required, since you could use an empty
    permission_classes list, but it's useful because it makes the intention
    more explicit.
    """
    def has_permission(self, request, view): # -> Literal[True]:
        ...
    


class IsAuthenticated(BasePermission):
    """
    Allows access only to authenticated users.
    """
    def has_permission(self, request, view): # -> bool:
        ...
    


class IsAdminUser(BasePermission):
    """
    Allows access only to admin users.
    """
    def has_permission(self, request, view): # -> bool:
        ...
    


class IsAuthenticatedOrReadOnly(BasePermission):
    """
    The request is authenticated as a user, or is a read-only request.
    """
    def has_permission(self, request, view): # -> bool:
        ...
    


class DjangoModelPermissions(BasePermission):
    """
    The request is authenticated using `django.contrib.auth` permissions.
    See: https://docs.djangoproject.com/en/dev/topics/auth/#permissions

    It ensures that the user is authenticated, and has the appropriate
    `add`/`change`/`delete` permissions on the model.

    This permission can only be applied against view classes that
    provide a `.queryset` attribute.
    """
    perms_map = ...
    authenticated_users_only = ...
    def get_required_permissions(self, method, model_cls): # -> list[str]:
        """
        Given a model and an HTTP method, return the list of permission
        codes that the user is required to have.
        """
        ...
    
    def has_permission(self, request, view): # -> bool:
        ...
    


class DjangoModelPermissionsOrAnonReadOnly(DjangoModelPermissions):
    """
    Similar to DjangoModelPermissions, except that anonymous users are
    allowed read-only access.
    """
    authenticated_users_only = ...


class DjangoObjectPermissions(DjangoModelPermissions):
    """
    The request is authenticated using Django's object-level permissions.
    It requires an object-permissions-enabled backend, such as Django Guardian.

    It ensures that the user is authenticated, and has the appropriate
    `add`/`change`/`delete` permissions on the object using .has_perms.

    This permission can only be applied against view classes that
    provide a `.queryset` attribute.
    """
    perms_map = ...
    def get_required_object_permissions(self, method, model_cls): # -> list[str]:
        ...
    
    def has_object_permission(self, request, view, obj): # -> bool:
        ...
    


