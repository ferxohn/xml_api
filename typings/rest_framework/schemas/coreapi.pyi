"""
This type stub file was generated by pyright.
"""

from collections import OrderedDict
from .generators import BaseSchemaGenerator
from .inspectors import ViewInspector

def common_path(paths): # -> str:
    ...

def is_custom_action(action): # -> bool:
    ...

def distribute_links(obj): # -> None:
    ...

INSERT_INTO_COLLISION_FMT = ...
class LinkNode(OrderedDict):
    def __init__(self) -> None:
        ...
    
    def get_available_key(self, preferred_key): # -> str:
        ...
    


def insert_into(target, keys, value): # -> None:
    """
    Nested dictionary insertion.

    >>> example = {}
    >>> insert_into(example, ['a', 'b', 'c'], 123)
    >>> example
    LinkNode({'a': LinkNode({'b': LinkNode({'c': LinkNode(links=[123])}}})))
    """
    ...

class SchemaGenerator(BaseSchemaGenerator):
    """
    Original CoreAPI version.
    """
    default_mapping = ...
    coerce_method_names = ...
    def __init__(self, title=..., url=..., description=..., patterns=..., urlconf=..., version=...) -> None:
        ...
    
    def get_links(self, request=...): # -> LinkNode | None:
        """
        Return a dictionary containing all the links that should be
        included in the API schema.
        """
        ...
    
    def get_schema(self, request=..., public=...): # -> None:
        """
        Generate a `coreapi.Document` representing the API schema.
        """
        ...
    
    def get_keys(self, subpath, method, view): # -> list[Unknown]:
        """
        Return a list of keys that should be used to layout a link within
        the schema document.

        /users/                   ("users", "list"), ("users", "create")
        /users/{pk}/              ("users", "read"), ("users", "update"), ("users", "delete")
        /users/enabled/           ("users", "enabled")  # custom viewset list action
        /users/{pk}/star/         ("users", "star")     # custom viewset detail action
        /users/{pk}/groups/       ("users", "groups", "list"), ("users", "groups", "create")
        /users/{pk}/groups/{pk}/  ("users", "groups", "read"), ("users", "groups", "update"), ("users", "groups", "delete")
        """
        ...
    
    def determine_path_prefix(self, paths): # -> str:
        """
        Given a list of all paths, return the common prefix which should be
        discounted when generating a schema structure.

        This will be the longest common string that does not include that last
        component of the URL, or the last component before a path parameter.

        For example:

        /api/v1/users/
        /api/v1/users/{pk}/

        The path prefix is '/api/v1'
        """
        ...
    


def field_to_schema(field):
    ...

class AutoSchema(ViewInspector):
    """
    Default inspector for APIView

    Responsible for per-view introspection and schema generation.
    """
    def __init__(self, manual_fields=...) -> None:
        """
        Parameters:

        * `manual_fields`: list of `coreapi.Field` instances that
            will be added to auto-generated fields, overwriting on `Field.name`
        """
        ...
    
    def get_link(self, path, method, base_url):
        """
        Generate `coreapi.Link` for self.view, path and method.

        This is the main _public_ access point.

        Parameters:

        * path: Route path for view from URLConf.
        * method: The HTTP request method.
        * base_url: The project "mount point" as given to SchemaGenerator
        """
        ...
    
    def get_path_fields(self, path, method):
        """
        Return a list of `coreapi.Field` instances corresponding to any
        templated path variables.
        """
        ...
    
    def get_serializer_fields(self, path, method):
        """
        Return a list of `coreapi.Field` instances corresponding to any
        request body input, as determined by the serializer class.
        """
        ...
    
    def get_pagination_fields(self, path, method): # -> list[Unknown]:
        ...
    
    def get_filter_fields(self, path, method): # -> list[Unknown]:
        ...
    
    def get_manual_fields(self, path, method): # -> list[Unknown]:
        ...
    
    @staticmethod
    def update_fields(fields, update_with): # -> list[Unknown]:
        """
        Update list of coreapi.Field instances, overwriting on `Field.name`.

        Utility function to handle replacing coreapi.Field fields
        from a list by name. Used to handle `manual_fields`.

        Parameters:

        * `fields`: list of `coreapi.Field` instances to update
        * `update_with: list of `coreapi.Field` instances to add or replace.
        """
        ...
    
    def get_encoding(self, path, method): # -> Any | Literal['application/octet-stream'] | None:
        """
        Return the 'encoding' parameter to use for a given endpoint.
        """
        ...
    


class ManualSchema(ViewInspector):
    """
    Allows providing a list of coreapi.Fields,
    plus an optional description.
    """
    def __init__(self, fields, description=..., encoding=...) -> None:
        """
        Parameters:

        * `fields`: list of `coreapi.Field` instances.
        * `description`: String description for view. Optional.
        """
        ...
    
    def get_link(self, path, method, base_url):
        ...
    


def is_enabled(): # -> bool:
    """Is CoreAPI Mode enabled?"""
    ...

