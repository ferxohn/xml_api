"""
This type stub file was generated by pyright.
"""

from django.core.paginator import Paginator as DjangoPaginator

"""
Pagination serializers determine the structure of the output that should
be used for paginated responses.
"""
Cursor = ...
PageLink = ...
PAGE_BREAK = ...
class BasePagination:
    display_page_controls = ...
    def paginate_queryset(self, queryset, request, view=...):
        ...
    
    def get_paginated_response(self, data):
        ...
    
    def get_paginated_response_schema(self, schema):
        ...
    
    def to_html(self):
        ...
    
    def get_results(self, data):
        ...
    
    def get_schema_fields(self, view): # -> list[Unknown]:
        ...
    
    def get_schema_operation_parameters(self, view): # -> list[Unknown]:
        ...
    


class PageNumberPagination(BasePagination):
    """
    A simple page number based style that supports page numbers as
    query parameters. For example:

    http://api.example.org/accounts/?page=4
    http://api.example.org/accounts/?page=4&page_size=100
    """
    page_size = ...
    django_paginator_class = DjangoPaginator
    page_query_param = ...
    page_query_description = ...
    page_size_query_param = ...
    page_size_query_description = ...
    max_page_size = ...
    last_page_strings = ...
    template = ...
    invalid_page_message = ...
    def paginate_queryset(self, queryset, request, view=...): # -> list[Unknown] | None:
        """
        Paginate a queryset if required, either returning a
        page object, or `None` if pagination is not configured for this view.
        """
        ...
    
    def get_page_number(self, request, paginator):
        ...
    
    def get_paginated_response(self, data): # -> Response:
        ...
    
    def get_paginated_response_schema(self, schema): # -> dict[str, str | dict[str, dict[str, str | int] | dict[str, str | bool] | Unknown]]:
        ...
    
    def get_page_size(self, request): # -> int | Any | list[Any] | dict[str, None] | bool | dict[str, str] | list[str] | str | list[Unknown] | None:
        ...
    
    def get_next_link(self): # -> str | None:
        ...
    
    def get_previous_link(self): # -> str | None:
        ...
    
    def get_html_context(self): # -> dict[str, str | list[Unknown] | None]:
        ...
    
    def to_html(self): # -> Any:
        ...
    
    def get_schema_fields(self, view): # -> list[Unknown]:
        ...
    
    def get_schema_operation_parameters(self, view): # -> list[dict[str, str | bool | dict[str, str]]]:
        ...
    


class LimitOffsetPagination(BasePagination):
    """
    A limit/offset based style. For example:

    http://api.example.org/accounts/?limit=100
    http://api.example.org/accounts/?offset=400&limit=100
    """
    default_limit = ...
    limit_query_param = ...
    limit_query_description = ...
    offset_query_param = ...
    offset_query_description = ...
    max_limit = ...
    template = ...
    def paginate_queryset(self, queryset, request, view=...): # -> list[Unknown] | None:
        ...
    
    def get_paginated_response(self, data): # -> Response:
        ...
    
    def get_paginated_response_schema(self, schema): # -> dict[str, str | dict[str, dict[str, str | int] | dict[str, str | bool] | Unknown]]:
        ...
    
    def get_limit(self, request): # -> int | Any | list[Any] | dict[str, None] | bool | dict[str, str] | list[str] | str | list[Unknown] | None:
        ...
    
    def get_offset(self, request): # -> int:
        ...
    
    def get_next_link(self): # -> str | None:
        ...
    
    def get_previous_link(self): # -> str | None:
        ...
    
    def get_html_context(self): # -> dict[str, str | list[Unknown] | None]:
        ...
    
    def to_html(self): # -> Any:
        ...
    
    def get_count(self, queryset): # -> int:
        """
        Determine an object count, supporting either querysets or regular lists.
        """
        ...
    
    def get_schema_fields(self, view): # -> list[Unknown]:
        ...
    
    def get_schema_operation_parameters(self, view): # -> list[dict[str, str | bool | dict[str, str]]]:
        ...
    


class CursorPagination(BasePagination):
    """
    The cursor pagination implementation is necessarily complex.
    For an overview of the position/offset style we use, see this post:
    https://cra.mr/2011/03/08/building-cursors-for-the-disqus-api
    """
    cursor_query_param = ...
    cursor_query_description = ...
    page_size = ...
    invalid_cursor_message = ...
    ordering = ...
    template = ...
    page_size_query_param = ...
    page_size_query_description = ...
    max_page_size = ...
    offset_cutoff = ...
    def paginate_queryset(self, queryset, request, view=...):
        ...
    
    def get_page_size(self, request): # -> int | Any | list[Any] | dict[str, None] | bool | dict[str, str] | list[str] | str | list[Unknown] | None:
        ...
    
    def get_next_link(self): # -> str | None:
        ...
    
    def get_previous_link(self): # -> str | None:
        ...
    
    def get_ordering(self, request, queryset, view): # -> tuple[str | Any | Unknown] | tuple[Any | Unknown, ...]:
        """
        Return a tuple of strings, that may be used in an `order_by` method.
        """
        ...
    
    def decode_cursor(self, request):
        """
        Given a request with a cursor, return a `Cursor` instance.
        """
        ...
    
    def encode_cursor(self, cursor): # -> str:
        """
        Given a Cursor instance, return an url with encoded cursor.
        """
        ...
    
    def get_paginated_response(self, data): # -> Response:
        ...
    
    def get_paginated_response_schema(self, schema): # -> dict[str, str | dict[str, dict[str, str | bool] | Unknown]]:
        ...
    
    def get_html_context(self): # -> dict[str, str | None]:
        ...
    
    def to_html(self): # -> Any:
        ...
    
    def get_schema_fields(self, view): # -> list[Unknown]:
        ...
    
    def get_schema_operation_parameters(self, view): # -> list[dict[str, str | bool | dict[str, str]]]:
        ...
    


