"""
This type stub file was generated by pyright.
"""

from django.conf import settings
from django.views.generic import View

"""
Provides an APIView class that is the base of all views in REST framework.
"""
def get_view_name(view): # -> Any | str:
    """
    Given a view instance, return a textual name to represent the view.
    This name is used in the browsable API, and in OPTIONS responses.

    This function is the default for the `VIEW_NAME_FUNCTION` setting.
    """
    ...

def get_view_description(view, html=...): # -> SafeText | str:
    """
    Given a view instance, return a textual description to represent the view.
    This name is used in the browsable API, and in OPTIONS responses.

    This function is the default for the `VIEW_DESCRIPTION_FUNCTION` setting.
    """
    ...

def set_rollback(): # -> None:
    ...

def exception_handler(exc, context): # -> Response | None:
    """
    Returns the response that should be used for any given exception.

    By default we handle the REST framework `APIException`, and also
    Django's built-in `Http404` and `PermissionDenied` exceptions.

    Any unhandled exceptions may return `None`, which will cause a 500 error
    to be raised.
    """
    ...

class APIView(View):
    renderer_classes = ...
    parser_classes = ...
    authentication_classes = ...
    throttle_classes = ...
    permission_classes = ...
    content_negotiation_class = ...
    metadata_class = ...
    versioning_class = ...
    settings = ...
    schema = ...
    @classmethod
    def as_view(cls, **initkwargs): # -> (*args: Any, **kwargs: Any) -> HttpResponseBase:
        """
        Store the original class on the view function.

        This allows us to discover information about the view when we do URL
        reverse lookups.  Used for breadcrumb generation.
        """
        ...
    
    @property
    def allowed_methods(self):
        """
        Wrap Django's private `_allowed_methods` interface in a public property.
        """
        ...
    
    @property
    def default_response_headers(self): # -> dict[str, str]:
        ...
    
    def http_method_not_allowed(self, request, *args, **kwargs): # -> NoReturn:
        """
        If `request.method` does not correspond to a handler method,
        determine what kind of exception to raise.
        """
        ...
    
    def permission_denied(self, request, message=..., code=...): # -> NoReturn:
        """
        If request is not permitted, determine what kind of exception to raise.
        """
        ...
    
    def throttled(self, request, wait): # -> NoReturn:
        """
        If request is throttled, determine what kind of exception to raise.
        """
        ...
    
    def get_authenticate_header(self, request): # -> None:
        """
        If a request is unauthenticated, determine the WWW-Authenticate
        header to use for 401 responses, if any.
        """
        ...
    
    def get_parser_context(self, http_request): # -> dict[str, Self@APIView | Any | tuple[()] | dict[Unknown, Unknown]]:
        """
        Returns a dict that is passed through to Parser.parse(),
        as the `parser_context` keyword argument.
        """
        ...
    
    def get_renderer_context(self): # -> dict[str, Self@APIView | Any | tuple[()] | dict[Unknown, Unknown] | None]:
        """
        Returns a dict that is passed through to Renderer.render(),
        as the `renderer_context` keyword argument.
        """
        ...
    
    def get_exception_handler_context(self): # -> dict[str, Self@APIView | Any | tuple[()] | dict[Unknown, Unknown] | None]:
        """
        Returns a dict that is passed through to EXCEPTION_HANDLER,
        as the `context` argument.
        """
        ...
    
    def get_view_name(self): # -> Any:
        """
        Return the view name, as used in OPTIONS responses and in the
        browsable API.
        """
        ...
    
    def get_view_description(self, html=...): # -> Any:
        """
        Return some descriptive text for the view, as used in OPTIONS responses
        and in the browsable API.
        """
        ...
    
    def get_format_suffix(self, **kwargs): # -> None:
        """
        Determine if the request includes a '.json' style format suffix
        """
        ...
    
    def get_renderers(self): # -> list[Unknown]:
        """
        Instantiates and returns the list of renderers that this view can use.
        """
        ...
    
    def get_parsers(self): # -> list[Unknown]:
        """
        Instantiates and returns the list of parsers that this view can use.
        """
        ...
    
    def get_authenticators(self): # -> list[Unknown]:
        """
        Instantiates and returns the list of authenticators that this view can use.
        """
        ...
    
    def get_permissions(self): # -> list[Unknown]:
        """
        Instantiates and returns the list of permissions that this view requires.
        """
        ...
    
    def get_throttles(self): # -> list[Unknown]:
        """
        Instantiates and returns the list of throttles that this view uses.
        """
        ...
    
    def get_content_negotiator(self): # -> Any:
        """
        Instantiate and return the content negotiation class to use.
        """
        ...
    
    def get_exception_handler(self): # -> Any | list[Any] | dict[str, None] | bool | int | dict[str, str] | list[str] | str | list[Unknown] | None:
        """
        Returns the exception handler that this view uses.
        """
        ...
    
    def perform_content_negotiation(self, request, force=...): # -> Any | tuple[Unknown, Unknown]:
        """
        Determine which renderer and media type to use render the response.
        """
        ...
    
    def perform_authentication(self, request): # -> None:
        """
        Perform authentication on the incoming request.

        Note that if you override this and simply 'pass', then authentication
        will instead be performed lazily, the first time either
        `request.user` or `request.auth` is accessed.
        """
        ...
    
    def check_permissions(self, request): # -> None:
        """
        Check if the request should be permitted.
        Raises an appropriate exception if the request is not permitted.
        """
        ...
    
    def check_object_permissions(self, request, obj): # -> None:
        """
        Check if the request should be permitted for a given object.
        Raises an appropriate exception if the request is not permitted.
        """
        ...
    
    def check_throttles(self, request): # -> None:
        """
        Check if request should be throttled.
        Raises an appropriate exception if the request is throttled.
        """
        ...
    
    def determine_version(self, request, *args, **kwargs): # -> tuple[None, None] | tuple[Any | Unknown, Any | Unknown]:
        """
        If versioning is being used, then determine any API version for the
        incoming request. Returns a two-tuple of (version, versioning_scheme)
        """
        ...
    
    def initialize_request(self, request, *args, **kwargs): # -> Request:
        """
        Returns the initial request object.
        """
        ...
    
    def initial(self, request, *args, **kwargs): # -> None:
        """
        Runs anything that needs to occur prior to calling the method handler.
        """
        ...
    
    def finalize_response(self, request, response, *args, **kwargs): # -> Response | HttpResponseBase:
        """
        Returns the final response object.
        """
        ...
    
    def handle_exception(self, exc): # -> Any:
        """
        Handle any exception that occurs, by returning an appropriate response,
        or re-raising the error.
        """
        ...
    
    def raise_uncaught_exception(self, exc): # -> NoReturn:
        ...
    
    def dispatch(self, request, *args, **kwargs):
        """
        `.dispatch()` is pretty much the same as Django's regular dispatch,
        but with extra hooks for startup, finalize, and exception handling.
        """
        ...
    
    def options(self, request, *args, **kwargs): # -> Response:
        """
        Handler method for HTTP 'OPTIONS' request.
        """
        ...
    


