"""
This type stub file was generated by pyright.
"""

from django import template

register = ...
class_re = ...
@register.tag(name='code')
def highlight_code(parser, token): # -> CodeNode:
    ...

class CodeNode(template.Node):
    style = ...
    def __init__(self, lang, code) -> None:
        ...
    
    def render(self, context):
        ...
    


@register.filter()
def with_location(fields, location): # -> list[Unknown]:
    ...

@register.simple_tag
def form_for_link(link):
    ...

@register.simple_tag
def render_markdown(markdown_text): # -> SafeText:
    ...

@register.simple_tag
def get_pagination_html(pager):
    ...

@register.simple_tag
def render_form(serializer, template_pack=...): # -> Any:
    ...

@register.simple_tag
def render_field(field, style):
    ...

@register.simple_tag
def optional_login(request): # -> SafeText | Literal['']:
    """
    Include a login snippet if REST framework's login view is in the URLconf.
    """
    ...

@register.simple_tag
def optional_docs_login(request): # -> SafeText | Literal['log in']:
    """
    Include a login snippet if REST framework's login view is in the URLconf.
    """
    ...

@register.simple_tag
def optional_logout(request, user): # -> SafeText:
    """
    Include a logout snippet if REST framework's logout view is in the URLconf.
    """
    ...

@register.simple_tag
def add_query_param(request, key, val): # -> SafeText:
    """
    Add a query parameter to the current request url, and return the new url.
    """
    ...

@register.filter
def as_string(value): # -> Literal['']:
    ...

@register.filter
def as_list_of_strings(value): # -> list[Unknown | str]:
    ...

@register.filter
def add_class(value, css_class): # -> SafeText:
    """
    https://stackoverflow.com/questions/4124220/django-adding-css-classes-when-rendering-form-fields-in-a-template

    Inserts classes into template variables that contain HTML tags,
    useful for modifying forms without needing to change the Form objects.

    Usage:

        {{ field.label_tag|add_class:"control-label" }}

    In the case of REST Framework, the filter is used to add Bootstrap-specific
    classes to the forms.
    """
    ...

@register.filter
def format_value(value): # -> SafeText | Any | str:
    ...

@register.filter
def items(value): # -> list[Unknown]:
    """
    Simple filter to return the items of the dict. Useful when the dict may
    have a key 'items' which is resolved first in Django template dot-notation
    lookup.  See issue #4931
    Also see: https://stackoverflow.com/questions/15416662/django-template-loop-over-dictionary-items-with-items-as-key
    """
    ...

@register.filter
def data(value):
    """
    Simple filter to access `data` attribute of object,
    specifically coreapi.Document.

    As per `items` filter above, allows accessing `document.data` when
    Document contains Link keyed-at "data".

    See issue #5395
    """
    ...

@register.filter
def schema_links(section, sec_key=...): # -> OrderedDict[Unknown, Unknown]:
    """
    Recursively find every link in a schema, even nested.
    """
    ...

@register.filter
def add_nested_class(value): # -> Literal['class=nested', '']:
    ...

TRAILING_PUNCTUATION = ...
WRAPPING_PUNCTUATION = ...
word_split_re = ...
simple_url_re = ...
simple_url_2_re = ...
simple_email_re = ...
def smart_urlquote_wrapper(matched_url): # -> str | None:
    """
    Simple wrapper for smart_urlquote. ValueError("Invalid IPv6 URL") can
    be raised here, see issue #1386
    """
    ...

@register.filter
def break_long_headers(header): # -> SafeText:
    """
    Breaks headers longer than 160 characters (~page length)
    when possible (are comma separated)
    """
    ...

